{"version":3,"sources":["logo.png","assets/pic1.png","assets/pic2.png","layout/header/Logo.tsx","layout/header/Actions.tsx","layout/header/Header.tsx","layout/body/download/DownIcon.tsx","layout/body/download/Download.tsx","layout/body/section/Image.tsx","layout/body/section/Section.tsx","layout/body/Body.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Logo","props","className","src","logo","width","Actions","href","Header","DownIcon","xmlns","height","viewBox","fill","d","Download","img1","require","img2","PurpleSwitch","withStyles","switchBase","color","grey","backgroundColor","checked","track","Switch","Image","useState","isDark","setDark","c","onChange","e","target","FormControlLabel","control","label","style","display","Section","Body","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,iGCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,0GCY5BC,EAPwB,SAACC,GACpC,OAAO,yBAAKC,UAAU,YAClB,yBAAKA,UAAU,eAAeC,IAAKC,IAAMC,MAAO,KAChD,yBAAKH,UAAU,iBAAf,gBCKOI,EAT2B,SAACL,GACvC,OAAO,yBAAKC,UAAU,eAClB,uBAAGK,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,YACA,uBAAGA,KAAK,KAAR,WACA,uBAAGA,KAAK,uDAAR,aCKOC,EAP0B,SAACP,GACtC,OAAO,yBAAKC,UAAU,cAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGOO,EAR4B,SAACR,GACxC,OAAO,yBAAKS,MAAM,6BAA6BC,OAAO,KAAKC,QAAQ,YAAYP,MAAM,MAEjF,0BAAMQ,KAAK,OACPC,EAAE,yLCICC,EAR4B,SAACd,GACxC,OAAO,yBAAKC,UAAU,gBAClB,uBAAGK,KAAK,GAAGL,UAAU,YACjB,kBAAC,EAAD,MADJ,qB,uCCHFc,EAAOC,EAAQ,IACfC,EAAOD,EAAQ,IAEfE,EAAeC,YAAW,CAC5BC,WAAY,CACRC,MAAOC,IAAK,KACZ,YAAa,CACTD,MAAOC,IAAK,MAEhB,qBAAsB,CAClBC,gBAAiBD,IAAK,OAG9BE,QAAS,GACTC,MAAO,IAXUN,CAYlBO,KAoBYC,EAfyB,SAAC3B,GAAW,IAAD,EACrB4B,oBAAS,GADY,mBACxCC,EADwC,KAChCC,EADgC,KAEzCC,EAAK,kBAACb,EAAD,CACPc,SAAU,SAAAC,GACNH,EAAQG,EAAEC,OAAOV,UAErBA,QAASK,IAEb,OAAO,yBAAK5B,UAAU,uBAClB,kBAACkC,EAAA,EAAD,CAAkBC,QAASL,EAAGM,MAAO,oBACrC,yBAAKnC,IAAKa,EAAMX,MAAO,IAAKkC,MAAO,CAACC,QAASV,EAAQ,OAAQ,WAC7D,yBAAK3B,IAAKe,EAAMb,MAAO,IAAKkC,MAAO,CAACC,QAASV,EAAQ,QAAS,YCRvDW,EArB2B,SAACxC,GACvC,OAAO,yBAAKC,UAAU,eAClB,yBAAKA,UAAU,2BACX,wBAAIA,UAAU,iCAAd,+BAGA,yBAAKA,UAAU,kCACX,sFACA,mEAEJ,yBAAKA,UAAU,iCACX,kBAAC,EAAD,QAIR,yBAAKA,UAAU,qBACX,kBAAC,EAAD,SCVGwC,EANwB,SAACzC,GACpC,OAAO,yBAAKC,UAAU,YAClB,kBAAC,EAAD,QCMOyC,MATf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fef5d6ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a9912d82.png\";","module.exports = __webpack_public_path__ + \"static/media/pic1.ea775f5b.png\";","module.exports = __webpack_public_path__ + \"static/media/pic2.d9b72133.png\";","import React, { FunctionComponent } from 'react';\nimport logo from '../../logo.png';\n\ninterface Props {}\n\nconst Logo: FunctionComponent<Props> = (props) => {\n    return <div className='app-logo'>\n        <img className='app-logo-img' src={logo} width={60}/>\n        <div className='app-logo-name'>Grace Note</div>\n    </div>;\n};\n\nexport default Logo;\n","import React, { FunctionComponent } from 'react';\n\ninterface Props {}\n\nconst Actions: FunctionComponent<Props> = (props) => {\n    return <div className='app-actions'>\n        <a href='#'>Home</a>\n        <a href='#'>Features</a>\n        <a href='#'>Support</a>\n        <a href='mailto:yuankui64@gmail.com?subject=%5Bgrace-note%5D'>Contact</a>\n    </div>;\n};\n\nexport default Actions;\n","import React, {FunctionComponent} from 'react';\nimport Logo from \"./Logo\";\nimport Actions from \"./Actions\";\n\ninterface Props {\n}\n\nconst Header: FunctionComponent<Props> = (props) => {\n    return <div className='app-header'>\n        <Logo/>\n        <Actions/>\n    </div>;\n};\n\nexport default Header;\n","import React, {FunctionComponent} from 'react';\n\ninterface Props {\n}\n\nconst DownIcon: FunctionComponent<Props> = (props) => {\n    return <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n        {/*<path d=\"M0 0h24v24H0z\"/>*/}\n        <path fill='#FFF'\n            d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z\"/>\n    </svg>;\n};\n\nexport default DownIcon;\n","import React, { FunctionComponent } from 'react';\nimport DownIcon from \"./DownIcon\";\n\ninterface Props {}\n\nconst Download: FunctionComponent<Props> = (props) => {\n    return <div className='app-download'>\n        <a href='' className='download'>\n            <DownIcon/>To be Coming...\n        </a>\n    </div>;\n};\n\nexport default Download;\n","import React, {FunctionComponent, useState} from 'react';\nimport {FormControlLabel, Switch, withStyles} from \"@material-ui/core\";\nimport {grey} from \"@material-ui/core/colors\";\n\nconst img1 = require('../../../assets/pic1.png');\nconst img2 = require('../../../assets/pic2.png');\n\nconst PurpleSwitch = withStyles({\n    switchBase: {\n        color: grey[500],\n        '&$checked': {\n            color: grey[300],\n        },\n        '&$checked + $track': {\n            backgroundColor: grey[300],\n        },\n    },\n    checked: {},\n    track: {},\n})(Switch);\n\ninterface Props {\n}\n\nconst Image: FunctionComponent<Props> = (props) => {\n    const [isDark, setDark] = useState(false);\n    const c = (<PurpleSwitch\n        onChange={e => {\n            setDark(e.target.checked);\n        }}\n        checked={isDark}/>);\n\n    return <div className='app-image-container'>\n        <FormControlLabel control={c} label={\"Toggle DarkMode\"}/>\n        <img src={img1} width={800} style={{display: isDark? 'none': 'block'}}/>\n        <img src={img2} width={800} style={{display: isDark? 'block': 'none'}}/>\n    </div>;\n};\n\nexport default Image;\n","import React, { FunctionComponent } from 'react';\nimport Download from \"../download/Download\";\nimport Image from \"./Image\";\n\ninterface Props {}\n\nconst Section: FunctionComponent<Props> = (props) => {\n    return <div className='app-section'>\n        <div className='app-section-description'>\n            <h1 className='app-section-description-title'>\n                An Notebook for Programmers\n            </h1>\n            <div className='app-section-description-detail'>\n                <p>It's designed to accelerate programmers' everyday life.</p>\n                <p>With A bunch of build in extensions</p>\n            </div>\n            <div className='app-section-description-extra'>\n                <Download/>\n            </div>\n        </div>\n\n        <div className='app-section-image'>\n            <Image/>\n        </div>\n    </div>;\n};\n\nexport default Section;\n","import React, { FunctionComponent } from 'react';\nimport Section from \"./section/Section\";\nimport Download from \"./download/Download\";\n\ninterface Props {}\n\nconst Body: FunctionComponent<Props> = (props) => {\n    return <div className='app-body'>\n        <Section/>\n    </div>\n};\n\nexport default Body;\n","import React from 'react';\nimport './App.scss';\nimport Header from \"./layout/header/Header\";\nimport Body from \"./layout/body/Body\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}